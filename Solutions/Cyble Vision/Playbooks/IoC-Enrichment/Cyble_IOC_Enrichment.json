{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
      "title": "Cyble-IOC_Enrichment",
      "description": "This playbook leverages the Cyble API to enrich IP, Domain, Url & Hash indicators, found in Microsoft Sentinel incidents, with the following context: Risk Score, Confidence, etc. The enrichment content will be posted as a comment in the Microsoft Sentinel incident",
      "prerequisites": [
        "To use the Cyble Endpoints for Azure connector, you will need a valid API token from Cyble Vision platform."
      ],
      "postDeployment": [
            "test"
        ],
      "prerequisitesDeployTemplateFile": "",
      "lastUpdateTime": "2025-05-06T00:00:00.000Z",
      "entities": [
        "ip",
        "url",
        "filehash"
      ],
      "tags": [
        "Enrichment"
      ],
      "support": {
        "tier": "Partner"
      },
      "author": {
        "name": "Cyble Inc."
      },
      "releaseNotes": [
        {
          "version": "1.0",
          "title": "Cyble-IOC_Enrichment",
          "notes": [
            "Initial version"
          ]
        }
      ],
      "basics": {
        "displayName": "Cyble IOC Enrichment",
        "description": "Enrich IOCs using the Cyble Threat Intelligence API.",
        "category": "Threat Intelligence"
      }
    },
    "triggers": {
      "Microsoft_Sentinel_incident": {
        "type": "ApiConnectionWebhook",
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azuresentinel']['connectionId']"
            }
          },
          "body": {
            "callback_url": "@{listCallbackUrl()}"
          },
          "path": "/incident-creation"
        }
      }
    },
    "actions": {
      "Parse_FullIncident": {
        "runAfter": {},
        "type": "ParseJson",
        "inputs": {
          "content": "@triggerOutputs()?['body/object']",
          "schema": {
            "type": "object",
            "properties": {
              "Properties": {
                "type": "object",
                "properties": {
                  "relatedEntities": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "Parse_Entities": {
        "runAfter": {
          "Parse_FullIncident": [
            "Succeeded"
          ]
        },
        "type": "ParseJson",
        "inputs": {
          "content": "@body('Parse_FullIncident')?['Properties']?['relatedEntities']",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "Initialize_Enrichment_Array": {
        "runAfter": {
          "Parse_Entities": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable",
        "inputs": {
          "variables": [
            {
              "name": "FormattedComments",
              "type": "Array",
              "value": []
            }
          ]
        }
      },
      "For_each_Entity": {
        "foreach": "@body('Parse_Entities')",
        "actions": {
          "HTTP_Get_IOC_Data": {
            "type": "Http",
            "inputs": {
              "uri": "@concat('https://api.cyble.ai/engine/api/v2/y/iocs?ioc=', coalesce(if(equals(toLower(item()?['kind']),'filehash'), item()?['properties']?['hashValue'], null), if(equals(toLower(item()?['kind']),'ip'), item()?['properties']?['address'], null), if(equals(toLower(item()?['kind']),'url'), item()?['properties']?['url'], null), if(equals(toLower(item()?['kind']),'host'), item()?['properties']?['hostName'], null), if(equals(toLower(item()?['kind']),'mailbox'), item()?['properties']?['mailboxPrimaryAddress'], null), ''))",
              "method": "GET",
              "headers": {
                "Authorization": "Bearer aQWW-g6C070b",
                "Content-Type": "application/json"
              }
            }
          },
          "Parse_IOC_Response": {
            "runAfter": {
              "HTTP_Get_IOC_Data": [
                "Succeeded"
              ]
            },
            "type": "ParseJson",
            "inputs": {
              "content": "@body('HTTP_Get_IOC_Data')",
              "schema": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "iocs": {
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": "object",
                          "properties": {
                            "ioc": {
                              "type": "string"
                            },
                            "ioc_type": {
                              "type": "string"
                            },
                            "first_seen": {
                              "type": "number"
                            },
                            "last_seen": {
                              "type": "number"
                            },
                            "risk_score": {
                              "type": "integer"
                            },
                            "sources": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "behaviour_tags": {
                              "type": [
                                "string",
                                "array",
                                "null"
                              ],
                              "items": {
                                "type": "string"
                              }
                            },
                            "confidence_rating": {
                              "type": "string"
                            },
                            "target_countries": {
                              "type": [
                                "array",
                                "null"
                              ],
                              "items": {
                                "type": "string"
                              }
                            },
                            "target_regions": {
                              "type": [
                                "array",
                                "null"
                              ],
                              "items": {
                                "type": "string"
                              }
                            },
                            "target_industries": {
                              "type": [
                                "array",
                                "null"
                              ],
                              "items": {
                                "type": "string"
                              }
                            },
                            "related_malware": {
                              "type": [
                                "string",
                                "array",
                                "null"
                              ]
                            },
                            "related_threat_actors": {
                              "type": [
                                "string",
                                "array",
                                "null"
                              ]
                            },
                            "is_whitelisted": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "pagination": {
                        "type": "object",
                        "properties": {
                          "total_count": {
                            "type": "integer"
                          },
                          "page": {
                            "type": "integer"
                          },
                          "limit": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "Compose_Formatted_Comment": {
            "runAfter": {
              "Parse_IOC_Response": [
                "Succeeded"
              ]
            },
            "type": "Compose",
            "inputs": "@concat('---\\n**Entity:** ', coalesce(item()?['properties']?['address'], item()?['properties']?['hostName'], item()?['properties']?['url'], item()?['properties']?['mailboxPrimaryAddress'], item()?['properties']?['hashValue'], 'Unknown'), '\\n', if(equals(body('Parse_IOC_Response')?['success'], true), join(body('Parse_IOC_Response')?['data']?['iocs'], concat('**IOC:** ', coalesce(item()?['ioc'], 'N/A'), '\\n', '**Type:** ', coalesce(item()?['ioc_type'], 'N/A'), '\\n', '**Risk Score:** ', coalesce(string(item()?['risk_score']), 'N/A'), '\\n', '**Confidence Rating:** ', coalesce(item()?['confidence_rating'], 'N/A'), '\\n', '**Sources:** ', if(equals(item()?['sources'], null), 'N/A', join(item()?['sources'], ', ')), '\\n', '**Malware:** ', if(equals(item()?['related_malware'], null), 'N/A', join(if(equals(type(item()?['related_malware']), 'string'), json(concat('[\"', item()?['related_malware'], '\"]')), item()?['related_malware']), ', ')), '\\n', '**Threat Actors:** ', if(equals(item()?['related_threat_actors'], null), 'N/A', join(if(equals(type(item()?['related_threat_actors']), 'string'), json(concat('[\"', item()?['related_threat_actors'], '\"]')), item()?['related_threat_actors']), ', ')), '\\n', '**Behavior Tags:** ', if(equals(item()?['behaviour_tags'], null), 'N/A', join(item()?['behaviour_tags'], ', ')), '\\n', '**First Seen:** ', coalesce(string(item()?['first_seen']), 'N/A'), '\\n', '**Last Seen:** ', coalesce(string(item()?['last_seen']), 'N/A'), '\\n', '**Is Whitelisted:** ', coalesce(string(item()?['is_whitelisted']), 'N/A'), '\\n', '---\\n')), 'API returned an error or no data available.\\n'))"
          },
          "Append_Comment_to_Array": {
            "runAfter": {
              "Compose_Formatted_Comment": [
                "Succeeded"
              ]
            },
            "type": "AppendToArrayVariable",
            "inputs": {
              "name": "FormattedComments",
              "value": "@outputs('Compose_Formatted_Comment')"
            }
          }
        },
        "runAfter": {
          "Initialize_Enrichment_Array": [
            "Succeeded"
          ]
        },
        "type": "Foreach"
      },
      "Check_If_Comments_Not_Empty": {
        "actions": {
          "Add_comment_to_incident_(V3)": {
            "type": "ApiConnection",
            "inputs": {
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                }
              },
              "method": "post",
              "body": {
                "incidentArmId": "@body('Parse_FullIncident')?['id']",
                "message": "<p class=\"editor-paragraph\">@{concat('**IOC Enrichment Results**\\\\n\\\\n', join(variables('FormattedComments'), '\\\\n'))}</p>"
              },
              "path": "/Incidents/Comment"
            }
          }
        },
        "runAfter": {
          "For_each_Entity": [
            "Succeeded"
          ]
        },
        "else": {
          "actions": {
            "No_Comments_Skip": {
              "type": "Compose",
              "inputs": "No enriched IOCs found; skipping comment."
            }
          }
        },
        "expression": "@greater(length(variables('FormattedComments')), 0)",
        "type": "If"
      }
    },
    "outputs": {},
    "parameters": {
      "CybleApiBearerToken": {
        "type": "String"
      },
      "$connections": {
        "type": "Object",
        "defaultValue": {}
      }
    }
  },
  "parameters": {
    "$connections": {
      "type": "Object",
      "value": {
        "azuresentinel": {
          "connectionId": "[resourceId('Microsoft.Web/connections', variables('apiConnectionResourceName'))]",
          "connectionName": "[variables('apiConnectionResourceName')]",
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('Location'), '/managedApis/azuresentinel')]",
          "alternativeParameterValues": {
            "authenticationType": "ManagedServiceIdentity"
          }
        }
      }
    }
  }
}
