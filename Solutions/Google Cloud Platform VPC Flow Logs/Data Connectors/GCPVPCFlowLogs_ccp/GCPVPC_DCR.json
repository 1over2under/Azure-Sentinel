[
    {
        "name": "GCPFlowDCR",
        "apiVersion": "2021-09-01-preview",
        "type": "Microsoft.Insights/dataCollectionRules",
        "location": "{{location}}",
        "properties": {
            "dataCollectionEndpointId": "{{dataCollectionEndpointId}}",
            "streamDeclarations": {
                "Custom-GCPFlowLogs": {
                    "columns": [
                        {
                            "name": "insertId",
                            "type": "string"
                        },
                        {
                            "name": "logName",
                            "type": "string"
                        },
                        {
                            "name": "jsonPayload",
                            "type": "dynamic"
                        },
                        {
                            "name": "receiveTimestamp",
                            "type": "datetime"
                        },
                        {
                            "name": "resource",
                            "type": "dynamic"
                        },
                        {
                            "name": "timestamp",
                            "type": "datetime"
                        }
                    ]
                }
            },
            "destinations": {
                "logAnalytics": [
                    {
                        "workspaceResourceId": "{{workspaceResourceId}}",
                        "name": "clv2ws1"
                    }
                ]
            },
            "dataFlows": [
                {
                    "streams": [
                        "Custom-GCPFlowLogs"
                    ],
                    "destinations": [
                        "clv2ws1"
                    ],
                    "transformKql": "source |extend TimeGenerated = timestamp, insertId = tostring(insertId), bytes_sent = tostring(jsonPayload['bytes_sent']), packets_sent = tostring(jsonPayload['packets_sent']), reporter = tostring(jsonPayload['reporter']), rtt_msec = tostring(jsonPayload['rtt_msec']), start_time = todatetime(jsonPayload['start_time']), end_time = todatetime(jsonPayload['end_time']), logName = tostring(logName), receiveTimestamp = todatetime(receiveTimestamp), timestamp = todatetime(timestamp), location = tostring(resource.labels['location']),project_id = tostring(resource.labels['project_id']), subnetwork_id = tostring(resource.labels['subnetwork_id']), subnetwork_name = tostring(resource.labels['subnetwork_name']), resource_type = tostring(resource['type']), dest_ip = tostring(jsonPayload.connection['dest_ip']), dest_port = tostring(jsonPayload.connection['dest_port']), protocol = tostring(jsonPayload.connection['protocol']), src_ip = tostring(jsonPayload.connection['src_ip']), src_port = tostring(jsonPayload.connection['src_port']), dest_instance_project_id = tostring(jsonPayload.dest_instance['project_id']), dest_instance_region = tostring(jsonPayload.dest_instance['region']), dest_instance_vm_name = tostring(jsonPayload.dest_instance['vm_name']), dest_instance_zone = tostring(jsonPayload.dest_instance['zone']),dest_instance_group_name = tostring(jsonPayload.dest_instance.managed_instance_group['name']), dest_instance_group_zone = tostring(jsonPayload.dest_instance.managed_instance_group['zone']),dest_instance_group_region = tostring(jsonPayload.dest_instance.managed_instance_group['region']),dest_vpc_project_id = tostring(jsonPayload.dest_vpc['project_id']), dest_vpc_subnetwork_name = tostring(jsonPayload.dest_vpc['subnetwork_name']), dest_vpc_subnetwork_region = tostring(jsonPayload.dest_vpc['subnetwork_region']), dest_vpc_name = tostring(jsonPayload.dest_vpc['vpc_name']), network_service_dscp = tostring(jsonPayload.network_service['dscp']), src_instance_project_id = tostring(jsonPayload.src_instance['project_id']),src_instance_region = tostring(jsonPayload.src_instance['region']), src_instance_vm_name = tostring(jsonPayload.src_instance['vm_name']), src_instance_zone = tostring(jsonPayload.src_instance['zone']),src_instance_group_name = tostring(jsonPayload.src_instance.managed_instance_group['name']), src_instance_group_zone = tostring(jsonPayload.src_instance.managed_instance_group['zone']),src_instance_group_region = tostring(jsonPayload.src_instance.managed_instance_group['region']),src_vpc_project_id = tostring(jsonPayload.src_vpc['project_id']), src_vpc_subnetwork_name = tostring(jsonPayload.src_vpc['subnetwork_name']), src_vpc_subnetwork_region = tostring(jsonPayload.src_vpc['subnetwork_region']), src_vpc_name = tostring(jsonPayload.src_vpc['vpc_name']), dest_google_service_type = tostring(jsonPayload.dest_google_service['type']), src_google_service_type = tostring(jsonPayload.src_google_service['type']), dest_location_asn = tostring(jsonPayload.dest_location['asn']), dest_location_continent = tostring(jsonPayload.dest_location['continent']), dest_location_city = tostring(jsonPayload.dest_location['city']),dest_location_country = tostring(jsonPayload.dest_location['country']), dest_location_region = tostring(jsonPayload.dest_location['region']),  src_location_asn = tostring(jsonPayload.src_location['asn']), src_location_continent = tostring(jsonPayload.src_location['continent']), src_location_country = tostring(jsonPayload.src_location['country']),src_location_city = tostring(jsonPayload.src_location['city']), src_location_region = tostring(jsonPayload.src_location['region']), internet_routing_details_egress_asn = tostring(jsonPayload.internet_routing_details.egress_as_path[0].as_details[0].asn),lb_backend_group_name = tostring(jsonPayload.load_balancing['backend_group_name']), lb_backend_group_type = tostring(jsonPayload.load_balancing['backend_group_type']), lb_forwarding_rule_name = tostring(jsonPayload.load_balancing['forwarding_rule_name']), lb_forwarding_rule_project_id = tostring(jsonPayload.load_balancing['forwarding_rule_project_id']), lb_reporter = tostring(jsonPayload.load_balancing['reporter']), lb_scheme = tostring(jsonPayload.load_balancing['scheme']),lb_url_map_name = tostring(jsonPayload.load_balancing['url_map_name']),lb_backend_service_name = tostring(jsonPayload.load_balancing['backend_service_name']),  lb_type = tostring(jsonPayload.load_balancing['type']),lb_backend_group_location = tostring(jsonPayload.load_balancing['backend_group_location']),lb_vpc = todynamic(jsonPayload.load_balancing['vpc']),src_gke_cluster_location = tostring(jsonPayload.src_gke_details.cluster['cluster_location']), src_gke_cluster_name = tostring(jsonPayload.src_gke_details.cluster['cluster_name']), src_gke_service = todynamic(jsonPayload.src_gke_details.service),src_gke_pod_name = tostring(jsonPayload.src_gke_details.pod['pod_name']), src_gke_pod_namespace = tostring(jsonPayload.src_gke_details.pod['pod_namespace']), src_gke_pod_workload_name = tostring(jsonPayload.src_gke_details.pod.workload['name']), src_gke_pod_workload_type = tostring(jsonPayload.src_gke_details.pod.workload['type']),dest_gke_cluster_location = tostring(jsonPayload.dest_gke_details.cluster['cluster_location']), dest_gke_cluster_name = tostring(jsonPayload.dest_gke_details.cluster['cluster_name']), dest_gke_service = todynamic(jsonPayload.dest_gke_details.service),dest_gke_pod_name = tostring(jsonPayload.dest_gke_details.pod['pod_name']), dest_gke_pod_namespace = tostring(jsonPayload.dest_gke_details.pod['pod_namespace']), dest_gke_pod_workload_name = tostring(jsonPayload.dest_gke_details.pod.workload['name']), dest_gke_pod_workload_type = tostring(jsonPayload.dest_gke_details.pod.workload['type']),psc_attachment_project_id = tostring(jsonPayload.psc.psc_attachment['project_id']), psc_attachment_region = tostring(jsonPayload.psc.psc_attachment['region']),psc_attachment_vpc = todynamic(jsonPayload.psc.psc_attachment['vpc']), psc_endpoint_project_id = tostring(jsonPayload.psc.psc_endpoint['project_id']), psc_endpoint_connection_id = tostring(jsonPayload.psc.psc_endpoint['psc_connection_id']), psc_endpoint_region = tostring(jsonPayload.psc.psc_endpoint['region']), psc_endpoint_target_service_type = tostring(jsonPayload.psc.psc_endpoint['target_service_type']), psc_endpoint_vpc = todynamic(jsonPayload.psc.psc_endpoint['vpc']),src_gateway_project_id = tostring(jsonPayload.src_gateway['project_id']), src_gateway_location = tostring(jsonPayload.src_gateway['location']),src_gateway_name = tostring(jsonPayload.src_gateway['name']),src_gateway_type = tostring(jsonPayload.src_gateway['type']), src_gateway_vpc = todynamic(jsonPayload.src_gateway['vpc']), src_gateway_interconnect_name = tostring(jsonPayload.src_gateway['interconnect_name']), src_gateway_interconnect_project_number = tostring(jsonPayload.src_gateway['interconnect_project_number']), dest_gateway_project_id = tostring(jsonPayload.dest_gateway['project_id']), dest_gateway_location = tostring(jsonPayload.dest_gateway['location']), dest_gateway_name = tostring(jsonPayload.dest_gateway['name']), dest_gateway_type = tostring(jsonPayload.dest_gateway['type']), dest_gateway_vpc = todynamic(jsonPayload.dest_gateway['vpc']), dest_gateway_interconnect_name = tostring(jsonPayload.dest_gateway['interconnect_name']), dest_gateway_interconnect_project_number = tostring(jsonPayload.dest_gateway['interconnect_project_number'])|project-away jsonPayload,resource",
                    "outputStream": "Custom-GCPVPCFlowLogsV2_CL"
                }
            ]
        }
    }
]
