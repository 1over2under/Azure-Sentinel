{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Microsoft - support@microsoft.com",
    "comments": "Solution template for Google Apigee"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "resource group name where Microsoft Sentinel is setup"
      }
    },
    "subscription": {
      "type": "string",
      "defaultValue": "[last(split(subscription().id, '/'))]",
      "metadata": {
        "description": "subscription id where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "email": "support@microsoft.com",
    "_email": "[variables('email')]",
    "_solutionName": "Google Apigee",
    "_solutionVersion": "3.1.0",
    "solutionId": "azuresentinel.azure-sentinel-solution-googleapigeex",
    "_solutionId": "[variables('solutionId')]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "dataConnectorCCPVersion": "1.0.0",
    "_dataConnectorContentIdConnectorDefinition1": "GoogleApigeeXLogsCCPDefinition",
    "dataConnectorTemplateNameConnectorDefinition1": "[concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentIdConnectorDefinition1')))]",
    "_dataConnectorContentIdConnections1": "GoogleApigeeXLogsCCPDefinitionConnections",
    "dataConnectorTemplateNameConnections1": "[concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentIdConnections1')))]",
    "dataCollectionEndpointId1": "[concat('/subscriptions/',parameters('subscription'),'/resourceGroups/',parameters('resourceGroupName'),'/providers/Microsoft.Insights/dataCollectionEndpoints/',parameters('workspace'))]",
    "blanks": "[replace('b', 'b', '')]",
    "uiConfigId2": "ApigeeXDataConnector",
    "_uiConfigId2": "[variables('uiConfigId2')]",
    "dataConnectorContentId2": "ApigeeXDataConnector",
    "_dataConnectorContentId2": "[variables('dataConnectorContentId2')]",
    "dataConnectorId2": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId2'))]",
    "_dataConnectorId2": "[variables('dataConnectorId2')]",
    "dataConnectorTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId2'))))]",
    "dataConnectorVersion2": "1.0.0",
    "_dataConnectorcontentProductId2": "[concat(take(variables('_solutionId'),50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentId2'),'-', variables('dataConnectorVersion2'))))]",
    "parserObject1": {
      "_parserName1": "[concat(parameters('workspace'),'/','ApigeeX')]",
      "_parserId1": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ApigeeX')]",
      "parserTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('ApigeeX-Parser')))]",
      "parserVersion1": "1.0.0",
      "parserContentId1": "ApigeeX-Parser"
    },
    "parserObject2": {
      "_parserName2": "[concat(parameters('workspace'),'/','ApigeeXv2')]",
      "_parserId2": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ApigeeXv2')]",
      "parserTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('ApigeeXv2-Parser')))]",
      "parserVersion2": "1.0.0",
      "parserContentId2": "ApigeeXv2-Parser"
    },
    "parserObject3": {
      "_parserName3": "[concat(parameters('workspace'),'/','Unified_ApigeeX')]",
      "_parserId3": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'Unified_ApigeeX')]",
      "parserTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('Unified_ApigeeX-Parser')))]",
      "parserVersion3": "1.0.0",
      "parserContentId3": "Unified_ApigeeX-Parser"
    },
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('dataConnectorTemplateNameConnectorDefinition1'), variables('dataConnectorCCPVersion'))]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "contentId": "[variables('_dataConnectorContentIdConnectorDefinition1')]",
        "displayName": "Google ApigeeX",
        "contentKind": "DataConnector",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorCCPVersion')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentIdConnectorDefinition1'))]",
              "apiVersion": "2022-09-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectorDefinitions",
              "location": "[parameters('workspace-location')]",
              "kind": "Customizable",
              "properties": {
                "connectorUiConfig": {
                  "id": "GoogleApigeeXLogsCCPDefinition",
                  "title": "Google ApigeeX",
                  "publisher": "Microsoft",
                  "descriptionMarkdown": "The Google ApigeeX data connector provides the capability to ingest Audit logs into Microsoft Sentinel using the Google Apigee API. Refer to [Google Apigee API](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/?apix=true) documentation for more information.",
                  "graphQueriesTableName": "ApigeeXV2_CL",
                  "graphQueries": [
                    {
                      "metricName": "Total events received",
                      "legend": "Google ApigeeX Logs",
                      "baseQuery": "{{graphQueriesTableName}}"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Get Sample of Google ApigeeX logs",
                      "query": "{{graphQueriesTableName}}\n | take 10"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "{{graphQueriesTableName}}",
                      "lastDataReceivedQuery": "{{graphQueriesTableName}}\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriteria": [
                    {
                      "type": "HasDataConnectors"
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "Read and Write permissions are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "read": true,
                          "write": true,
                          "delete": true,
                          "action": false
                        }
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "instructions": [
                        {
                          "type": "MarkdownControlEnvBased",
                          "parameters": {
                            "prodScript": "#### 1. Setup the GCP environment \n Ensure to have the following resources from the GCP Console:\n Project ID, Project Name, GCP Subscription name for the project, Workload Identity Pool ID, Workspace Identity Provider ID, and a Service Account to establish the connection.\n For more information, refer the [Connector tutorial](https://github.com/v-gsrihitha/v-gsrihitha/blob/main/GCPApigee/ApigeeReadme.md) for log setup and authentication setup tutorial.\n Log set up script: [Click Here](https://github.com/v-gsrihitha/v-gsrihitha/blob/main/GCPApigee/GCPApigeeLogSetup.tf)\nAuthentication set up script: [Click here](https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GCP/Terraform/sentinel_resources_creation/GCPInitialAuthenticationSetup)",
                            "govScript": "#### 1. Setup the GCP environment \n Ensure to have the following resources from the GCP Console:\n Project ID, Project Name, GCP Subscription name for the project, Workload Identity Pool ID, Workspace Identity Provider ID, and a Service Account to establish the connection.\n For more information, refer the [Connector tutorial](https://github.com/v-gsrihitha/v-gsrihitha/blob/main/GCPApigee/ApigeeReadme.md) for log setup and authentication setup tutorial.\n Log set up script: [Click Here](https://github.com/v-gsrihitha/v-gsrihitha/blob/main/GCPApigee/GCPApigeeLogSetup.tf)\nAuthentication set up script: [Click here](https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GCP/Terraform/sentinel_resources_creation_gov/GCPInitialAuthenticationSetupGov)"
                          }
                        },
                        {
                          "type": "CopyableLabel",
                          "parameters": {
                            "label": "Tenant ID: A unique identifier that is used as an input in the Terraform configuration within a GCP environment.",
                            "fillWith": [
                              "TenantId"
                            ],
                            "name": "TenantId",
                            "disabled": true
                          }
                        },
                        {
                          "type": "Markdown",
                          "parameters": {
                            "content": "#### 2. Enable ApigeeX logs \n In the Google Cloud Console, enable Apigee API, if not enabled previously, and save the changes."
                          }
                        },
                        {
                          "type": "Markdown",
                          "parameters": {
                            "content": "#### 3. Connect new collectors \n To enable ApigeeX Logs for Microsoft Sentinel, click on Add new collector button, provide the required information in the pop up and click on Connect."
                          }
                        },
                        {
                          "type": "GCPGrid",
                          "parameters": {}
                        },
                        {
                          "type": "GCPContextPane",
                          "parameters": {}
                        }
                      ],
                      "title": "Connect Google ApigeeX to Microsoft Sentinel\n"
                    }
                  ]
                }
              }
            },
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', variables('_dataConnectorContentIdConnectorDefinition1')))]",
              "apiVersion": "2022-01-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectorDefinitions', variables('_dataConnectorContentIdConnectorDefinition1'))]",
                "contentId": "[variables('_dataConnectorContentIdConnectorDefinition1')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorCCPVersion')]",
                "source": {
                  "sourceId": "[variables('_solutionId')]",
                  "name": "[variables('_solutionName')]",
                  "kind": "Solution"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "version": "[variables('dataConnectorCCPVersion')]",
                      "contentId": "[variables('_dataConnectorContentIdConnections1')]",
                      "kind": "ResourcesDataConnector"
                    }
                  ]
                }
              }
            },
            {
              "name": "GoogleApigeeXDCR",
              "apiVersion": "2022-06-01",
              "type": "Microsoft.Insights/dataCollectionRules",
              "location": "[parameters('workspace-location')]",
              "kind": "[variables('blanks')]",
              "properties": {
                "dataCollectionEndpointId": "[variables('dataCollectionEndpointId1')]",
                "streamDeclarations": {
                  "Custom-ApigeeX": {
                    "columns": [
                      {
                        "name": "insertId",
                        "type": "string"
                      },
                      {
                        "name": "logName",
                        "type": "string"
                      },
                      {
                        "name": "operation",
                        "type": "string"
                      },
                      {
                        "name": "protoPayload",
                        "type": "dynamic"
                      },
                      {
                        "name": "receiveTimestamp",
                        "type": "datetime"
                      },
                      {
                        "name": "resource",
                        "type": "dynamic"
                      },
                      {
                        "name": "severity",
                        "type": "string"
                      },
                      {
                        "name": "timestamp",
                        "type": "datetime"
                      }
                    ]
                  }
                },
                "destinations": {
                  "logAnalytics": [
                    {
                      "workspaceResourceId": "[variables('workspaceResourceId')]",
                      "name": "clv2ws1"
                    }
                  ]
                },
                "dataFlows": [
                  {
                    "streams": [
                      "Custom-ApigeeX"
                    ],
                    "destinations": [
                      "clv2ws1"
                    ],
                    "transformKql": "source | extend TimeGenerated = todatetime(timestamp), InsertId = tostring(insertId), LogName = tostring(logName), Operation = tostring(operation), ProtoPayload = tostring(protoPayload), ReceiveTimestamp = todatetime(receiveTimestamp), Resource = tostring(resource), Severity = tostring(severity), Timestamp = todatetime(timestamp) | project InsertId, LogName, Operation, ProtoPayload, ReceiveTimestamp, Resource, Severity, Timestamp, TimeGenerated",
                    "outputStream": "Custom-ApigeeXV2_CL"
                  }
                ]
              }
            },
            {
              "name": "ApigeeXV2_CL",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/tables",
              "location": "[parameters('workspace-location')]",
              "kind": null,
              "properties": {
                "schema": {
                  "name": "ApigeeXV2_CL",
                  "columns": [
                    {
                      "name": "InsertId",
                      "type": "string",
                      "description": "A unique identifier for the log entry."
                    },
                    {
                      "name": "LogName",
                      "type": "string",
                      "description": "The full log name including resource path."
                    },
                    {
                      "name": "ReceiveTimestamp",
                      "type": "datetime",
                      "description": "Time the log entry was received by Cloud Logging."
                    },
                    {
                      "name": "Operation",
                      "type": "string",
                      "description": "Contains details about the operation being performed, including the operation ID, producer, and status information."
                    },
                    {
                      "name": "ProtoPayload",
                      "type": "dynamic",
                      "description": "Holds the structured audit log data, including authentication, method name, resource name, and service-specific information."
                    },
                    {
                      "name": "Resource",
                      "type": "dynamic",
                      "description": "Describes the resource associated with the log entry, including labels and resource type."
                    },
                    {
                      "name": "Severity",
                      "type": "string",
                      "description": "Indicates the severity level of the log entry or event"
                    },
                    {
                      "name": "TimeGenerated",
                      "type": "datetime",
                      "description": "The timestamp indicating when the log entry was created or received."
                    },
                    {
                      "name": "Timestamp",
                      "type": "datetime",
                      "description": "The original timestamp of the event as recorded by the source system."
                    }
                  ]
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "contentProductId": "[concat(take(variables('_solutionId'), 50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentIdConnectorDefinition1'),'-', variables('dataConnectorCCPVersion'))))]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "version": "[variables('dataConnectorCCPVersion')]"
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentIdConnectorDefinition1'))]",
      "apiVersion": "2022-09-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectorDefinitions",
      "location": "[parameters('workspace-location')]",
      "kind": "Customizable",
      "properties": {
        "connectorUiConfig": {
          "id": "GoogleApigeeXLogsCCPDefinition",
          "title": "Google ApigeeX",
          "publisher": "Microsoft",
          "descriptionMarkdown": "The Google ApigeeX data connector provides the capability to ingest Audit logs into Microsoft Sentinel using the Google Apigee API. Refer to [Google Apigee API](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/?apix=true) documentation for more information.",
          "graphQueriesTableName": "ApigeeXV2_CL",
          "graphQueries": [
            {
              "metricName": "Total events received",
              "legend": "Google ApigeeX Logs",
              "baseQuery": "{{graphQueriesTableName}}"
            }
          ],
          "sampleQueries": [
            {
              "description": "Get Sample of Google ApigeeX logs",
              "query": "{{graphQueriesTableName}}\n | take 10"
            }
          ],
          "dataTypes": [
            {
              "name": "{{graphQueriesTableName}}",
              "lastDataReceivedQuery": "{{graphQueriesTableName}}\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            }
          ],
          "connectivityCriteria": [
            {
              "type": "HasDataConnectors"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "Read and Write permissions are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "read": true,
                  "write": true,
                  "delete": true,
                  "action": false
                }
              }
            ]
          },
          "instructionSteps": [
            {
              "instructions": [
                {
                  "type": "MarkdownControlEnvBased",
                  "parameters": {
                    "prodScript": "#### 1. Setup the GCP environment \n Ensure to have the following resources from the GCP Console:\n Project ID, Project Name, GCP Subscription name for the project, Workload Identity Pool ID, Workspace Identity Provider ID, and a Service Account to establish the connection.\n For more information, refer the [Connector tutorial](https://github.com/v-gsrihitha/v-gsrihitha/blob/main/GCPApigee/ApigeeReadme.md) for log setup and authentication setup tutorial.\n Log set up script: [Click Here](https://github.com/v-gsrihitha/v-gsrihitha/blob/main/GCPApigee/GCPApigeeLogSetup.tf)\nAuthentication set up script: [Click here](https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GCP/Terraform/sentinel_resources_creation/GCPInitialAuthenticationSetup)",
                    "govScript": "#### 1. Setup the GCP environment \n Ensure to have the following resources from the GCP Console:\n Project ID, Project Name, GCP Subscription name for the project, Workload Identity Pool ID, Workspace Identity Provider ID, and a Service Account to establish the connection.\n For more information, refer the [Connector tutorial](https://github.com/v-gsrihitha/v-gsrihitha/blob/main/GCPApigee/ApigeeReadme.md) for log setup and authentication setup tutorial.\n Log set up script: [Click Here](https://github.com/v-gsrihitha/v-gsrihitha/blob/main/GCPApigee/GCPApigeeLogSetup.tf)\nAuthentication set up script: [Click here](https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GCP/Terraform/sentinel_resources_creation_gov/GCPInitialAuthenticationSetupGov)"
                  }
                },
                {
                  "type": "CopyableLabel",
                  "parameters": {
                    "label": "Tenant ID: A unique identifier that is used as an input in the Terraform configuration within a GCP environment.",
                    "fillWith": [
                      "TenantId"
                    ],
                    "name": "TenantId",
                    "disabled": true
                  }
                },
                {
                  "type": "Markdown",
                  "parameters": {
                    "content": "#### 2. Enable ApigeeX logs \n In the Google Cloud Console, enable Apigee API, if not enabled previously, and save the changes."
                  }
                },
                {
                  "type": "Markdown",
                  "parameters": {
                    "content": "#### 3. Connect new collectors \n To enable ApigeeX Logs for Microsoft Sentinel, click on Add new collector button, provide the required information in the pop up and click on Connect."
                  }
                },
                {
                  "type": "GCPGrid",
                  "parameters": {}
                },
                {
                  "type": "GCPContextPane",
                  "parameters": {}
                }
              ],
              "title": "Connect Google ApigeeX to Microsoft Sentinel\n"
            }
          ]
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', variables('_dataConnectorContentIdConnectorDefinition1')))]",
      "apiVersion": "2022-01-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectorDefinitions', variables('_dataConnectorContentIdConnectorDefinition1'))]",
        "contentId": "[variables('_dataConnectorContentIdConnectorDefinition1')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorCCPVersion')]",
        "source": {
          "sourceId": "[variables('_solutionId')]",
          "name": "[variables('_solutionName')]",
          "kind": "Solution"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        },
        "dependencies": {
          "criteria": [
            {
              "version": "[variables('dataConnectorCCPVersion')]",
              "contentId": "[variables('_dataConnectorContentIdConnections1')]",
              "kind": "ResourcesDataConnector"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('dataConnectorTemplateNameConnections1'), variables('dataConnectorCCPVersion'))]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "contentId": "[variables('_dataConnectorContentIdConnections1')]",
        "displayName": "Google ApigeeX",
        "contentKind": "ResourcesDataConnector",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorCCPVersion')]",
          "parameters": {
            "guidValue": {
              "defaultValue": "[[newGuid()]",
              "type": "securestring"
            },
            "innerWorkspace": {
              "defaultValue": "[parameters('workspace')]",
              "type": "securestring"
            },
            "GCPServiceAccountEmail": {
              "defaultValue": "-NA-",
              "type": "securestring",
              "minLength": 4
            },
            "GCPProjectNumber": {
              "defaultValue": "-NA-",
              "type": "securestring",
              "minLength": 1
            },
            "GCPWorkloadIdentityProviderId": {
              "defaultValue": "-NA-",
              "type": "securestring",
              "minLength": 4
            },
            "GCPProjectId": {
              "defaultValue": "-NA-",
              "type": "securestring",
              "minLength": 4
            },
            "GCPSubscriptionName": {
              "defaultValue": "-NA-",
              "type": "securestring",
              "minLength": 3
            },
            "connectorDefinitionName": {
              "defaultValue": "Google ApigeeX",
              "type": "securestring",
              "minLength": 1
            },
            "workspace": {
              "defaultValue": "[parameters('workspace')]",
              "type": "securestring"
            },
            "dcrConfig": {
              "defaultValue": {
                "dataCollectionEndpoint": "data collection Endpoint",
                "dataCollectionRuleImmutableId": "data collection rule immutableId"
              },
              "type": "object"
            }
          },
          "variables": {
            "_dataConnectorContentIdConnections1": "[variables('_dataConnectorContentIdConnections1')]"
          },
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', variables('_dataConnectorContentIdConnections1')))]",
              "apiVersion": "2022-01-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentIdConnections1'))]",
                "contentId": "[variables('_dataConnectorContentIdConnections1')]",
                "kind": "ResourcesDataConnector",
                "version": "[variables('dataConnectorCCPVersion')]",
                "source": {
                  "sourceId": "[variables('_solutionId')]",
                  "name": "[variables('_solutionName')]",
                  "kind": "Solution"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            },
            {
              "name": "[[concat(parameters('innerWorkspace'),'/Microsoft.SecurityInsights/', 'GoogleApigeeXLogs', parameters('guidValue'))]",
              "apiVersion": "2023-02-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GCP",
              "properties": {
                "connectorDefinitionName": "GoogleApigeeXLogsCCPDefinition",
                "dataType": "ApigeeXV2_CL",
                "dcrConfig": {
                  "streamName": "Custom-ApigeeX",
                  "dataCollectionEndpoint": "[[parameters('dcrConfig').dataCollectionEndpoint]",
                  "dataCollectionRuleImmutableId": "[[parameters('dcrConfig').dataCollectionRuleImmutableId]"
                },
                "auth": {
                  "serviceAccountEmail": "[[parameters('GCPServiceAccountEmail')]",
                  "projectNumber": "[[parameters('GCPProjectNumber')]",
                  "workloadIdentityProviderId": "[[parameters('GCPWorkloadIdentityProviderId')]"
                },
                "request": {
                  "projectId": "[[parameters('GCPProjectId')]",
                  "subscriptionNames": [
                    "[[parameters('GCPSubscriptionName')]"
                  ]
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "contentProductId": "[concat(take(variables('_solutionId'), 50),'-','rdc','-', uniqueString(concat(variables('_solutionId'),'-','ResourcesDataConnector','-',variables('_dataConnectorContentIdConnections1'),'-', variables('dataConnectorCCPVersion'))))]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "version": "[variables('dataConnectorCCPVersion')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('dataConnectorTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Google Apigee data connector with template version 3.1.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion2')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId2'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId2')]",
                  "title": "Google ApigeeX (using Azure Functions)",
                  "publisher": "Google",
                  "descriptionMarkdown": "The [Google ApigeeX](https://cloud.google.com/apigee/docs) data connector provides the capability to ingest ApigeeX audit logs into Microsoft Sentinel using the GCP Logging API. Refer to [GCP Logging API documentation](https://cloud.google.com/logging/docs/reference/v2/rest) for more information.",
                  "additionalRequirementBanner": ">This data connector depends on a parser based on a Kusto Function to work as expected [**ApigeeX**](https://aka.ms/sentinel-ApigeeXDataConnector-parser) which is deployed with the Microsoft Sentinel Solution.",
                  "graphQueries": [
                    {
                      "metricName": "ApigeeX logs",
                      "legend": "ApigeeX_CL",
                      "baseQuery": "ApigeeX_CL"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "All ApigeeX logs",
                      "query": "ApigeeX_CL\n| sort by TimeGenerated desc"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "ApigeeX_CL",
                      "lastDataReceivedQuery": "ApigeeX_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "ApigeeX_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(1d)"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions on the workspace are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "write": true,
                          "read": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                        "providerDisplayName": "Keys",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "action": true
                        }
                      }
                    ],
                    "customs": [
                      {
                        "name": "Microsoft.Web/sites permissions",
                        "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
                      },
                      {
                        "name": "GCP service account",
                        "description": "GCP service account with permissions to read logs is required for GCP Logging API. Also json file with service account key is required. See the documentation to learn more about [required permissions](https://cloud.google.com/iam/docs/audit-logging#audit_log_permissions), [creating service account](https://cloud.google.com/iam/docs/creating-managing-service-accounts) and [creating service account key](https://cloud.google.com/iam/docs/creating-managing-service-account-keys)."
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": ">**NOTE:** This connector uses Azure Functions to connect to the GCP API to pull logs into Microsoft Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
                    },
                    {
                      "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
                    },
                    {
                      "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected [**ApigeeX**](https://aka.ms/sentinel-ApigeeXDataConnector-parser) which is deployed with the Microsoft Sentinel Solution."
                    },
                    {
                      "description": "**STEP 1 - Configuring GCP and obtaining credentials**\n\n1. Make sure that Logging API is [enabled](https://cloud.google.com/apis/docs/getting-started#enabling_apis). \n\n2. [Create service account](https://cloud.google.com/iam/docs/creating-managing-service-accounts) with [required permissions](https://cloud.google.com/iam/docs/audit-logging#audit_log_permissions) and [get service account key json file](https://cloud.google.com/iam/docs/creating-managing-service-account-keys).\n\n3. Prepare GCP project ID where ApigeeX is located."
                    },
                    {
                      "description": "**STEP 2 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the data connector, have the Workspace ID and Workspace Primary Key (can be copied from the following), as well as Azure Blob Storage connection string and container name, readily available.",
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId"
                            ],
                            "label": "Workspace ID"
                          },
                          "type": "CopyableLabel"
                        },
                        {
                          "parameters": {
                            "fillWith": [
                              "PrimaryKey"
                            ],
                            "label": "Primary Key"
                          },
                          "type": "CopyableLabel"
                        }
                      ]
                    },
                    {
                      "description": "Use this method for automated deployment of the data connector using an ARM Template.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-ApigeeXDataConnector-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the **Google Cloud Platform Project Id**, **Google Cloud Platform Credentials File Content**, **Microsoft Sentinel Workspace Id**, **Microsoft Sentinel Shared Key**\n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**.\n5. Click **Purchase** to deploy.",
                      "title": "Option 1 - Azure Resource Manager (ARM) Template"
                    },
                    {
                      "description": "Use the following step-by-step instructions to deploy the data connector manually with Azure Functions (Deployment via Visual Studio Code).",
                      "title": "Option 2 - Manual Deployment of Azure Functions"
                    },
                    {
                      "description": "**1. Deploy a Function App**\n\n> **NOTE:** You will need to [prepare VS code](https://docs.microsoft.com/azure/azure-functions/create-first-function-vs-code-python) for Azure function development.\n\n1. Download the [Azure Function App](https://aka.ms/sentinel-ApigeeXDataConnector-functionapp) file. Extract archive to your local development computer.\n2. Start VS Code. Choose File in the main menu and select Open Folder.\n3. Select the top level folder from extracted files.\n4. Choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose the **Deploy to function app** button.\nIf you aren't already signed in, choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose **Sign in to Azure**\nIf you're already signed in, go to the next step.\n5. Provide the following information at the prompts:\n\n\ta. **Select folder:** Choose a folder from your workspace or browse to one that contains your function app.\n\n\tb. **Select Subscription:** Choose the subscription to use.\n\n\tc. Select **Create new Function App in Azure** (Don't choose the Advanced option)\n\n\td. **Enter a globally unique name for the function app:** Type a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions.\n\n\te. **Select a runtime:** Choose Python 3.11.\n\n\tf. Select a location for new resources. For better performance and lower costs choose the same [region](https://azure.microsoft.com/regions/) where Microsoft Sentinel is located.\n\n6. Deployment will begin. A notification is displayed after your function app is created and the deployment package is applied.\n7. Go to Azure Portal for the Function App configuration."
                    },
                    {
                      "description": "**2. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select **+ New application setting**.\n3. Add each of the following application settings individually, with their respective string values (case-sensitive): \n\t\tRESOURCE_NAMES\n\t\tCREDENTIALS_FILE_CONTENT\n\t\tWORKSPACE_ID\n\t\tSHARED_KEY\n\t\tlogAnalyticsUri (Optional)\n - Use logAnalyticsUri to override the log analytics API endpoint for dedicated cloud. For example, for public cloud, leave the value empty; for Azure GovUS cloud environment, specify the value in the following format: `https://WORKSPACE_ID.ods.opinsights.azure.us`. \n4. Once all application settings have been entered, click **Save**."
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2023-04-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId2'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId2'))]",
                "contentId": "[variables('_dataConnectorContentId2')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "Google Apigee",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_dataConnectorContentId2')]",
        "contentKind": "DataConnector",
        "displayName": "Google ApigeeX (using Azure Functions)",
        "contentProductId": "[variables('_dataConnectorcontentProductId2')]",
        "id": "[variables('_dataConnectorcontentProductId2')]",
        "version": "[variables('dataConnectorVersion2')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId2'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId2')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId2'))]",
        "contentId": "[variables('_dataConnectorContentId2')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion2')]",
        "source": {
          "kind": "Solution",
          "name": "Google Apigee",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId2'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "Google ApigeeX (using Azure Functions)",
          "publisher": "Google",
          "descriptionMarkdown": "The [Google ApigeeX](https://cloud.google.com/apigee/docs) data connector provides the capability to ingest ApigeeX audit logs into Microsoft Sentinel using the GCP Logging API. Refer to [GCP Logging API documentation](https://cloud.google.com/logging/docs/reference/v2/rest) for more information.",
          "graphQueries": [
            {
              "metricName": "ApigeeX logs",
              "legend": "ApigeeX_CL",
              "baseQuery": "ApigeeX_CL"
            }
          ],
          "dataTypes": [
            {
              "name": "ApigeeX_CL",
              "lastDataReceivedQuery": "ApigeeX_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "ApigeeX_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(1d)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "All ApigeeX logs",
              "query": "ApigeeX_CL\n| sort by TimeGenerated desc"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions on the workspace are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ],
            "customs": [
              {
                "name": "Microsoft.Web/sites permissions",
                "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
              },
              {
                "name": "GCP service account",
                "description": "GCP service account with permissions to read logs is required for GCP Logging API. Also json file with service account key is required. See the documentation to learn more about [required permissions](https://cloud.google.com/iam/docs/audit-logging#audit_log_permissions), [creating service account](https://cloud.google.com/iam/docs/creating-managing-service-accounts) and [creating service account key](https://cloud.google.com/iam/docs/creating-managing-service-account-keys)."
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">**NOTE:** This connector uses Azure Functions to connect to the GCP API to pull logs into Microsoft Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
            },
            {
              "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
            },
            {
              "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected [**ApigeeX**](https://aka.ms/sentinel-ApigeeXDataConnector-parser) which is deployed with the Microsoft Sentinel Solution."
            },
            {
              "description": "**STEP 1 - Configuring GCP and obtaining credentials**\n\n1. Make sure that Logging API is [enabled](https://cloud.google.com/apis/docs/getting-started#enabling_apis). \n\n2. [Create service account](https://cloud.google.com/iam/docs/creating-managing-service-accounts) with [required permissions](https://cloud.google.com/iam/docs/audit-logging#audit_log_permissions) and [get service account key json file](https://cloud.google.com/iam/docs/creating-managing-service-account-keys).\n\n3. Prepare GCP project ID where ApigeeX is located."
            },
            {
              "description": "**STEP 2 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the data connector, have the Workspace ID and Workspace Primary Key (can be copied from the following), as well as Azure Blob Storage connection string and container name, readily available.",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Workspace ID"
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "fillWith": [
                      "PrimaryKey"
                    ],
                    "label": "Primary Key"
                  },
                  "type": "CopyableLabel"
                }
              ]
            },
            {
              "description": "Use this method for automated deployment of the data connector using an ARM Template.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-ApigeeXDataConnector-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the **Google Cloud Platform Project Id**, **Google Cloud Platform Credentials File Content**, **Microsoft Sentinel Workspace Id**, **Microsoft Sentinel Shared Key**\n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**.\n5. Click **Purchase** to deploy.",
              "title": "Option 1 - Azure Resource Manager (ARM) Template"
            },
            {
              "description": "Use the following step-by-step instructions to deploy the data connector manually with Azure Functions (Deployment via Visual Studio Code).",
              "title": "Option 2 - Manual Deployment of Azure Functions"
            },
            {
              "description": "**1. Deploy a Function App**\n\n> **NOTE:** You will need to [prepare VS code](https://docs.microsoft.com/azure/azure-functions/create-first-function-vs-code-python) for Azure function development.\n\n1. Download the [Azure Function App](https://aka.ms/sentinel-ApigeeXDataConnector-functionapp) file. Extract archive to your local development computer.\n2. Start VS Code. Choose File in the main menu and select Open Folder.\n3. Select the top level folder from extracted files.\n4. Choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose the **Deploy to function app** button.\nIf you aren't already signed in, choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose **Sign in to Azure**\nIf you're already signed in, go to the next step.\n5. Provide the following information at the prompts:\n\n\ta. **Select folder:** Choose a folder from your workspace or browse to one that contains your function app.\n\n\tb. **Select Subscription:** Choose the subscription to use.\n\n\tc. Select **Create new Function App in Azure** (Don't choose the Advanced option)\n\n\td. **Enter a globally unique name for the function app:** Type a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions.\n\n\te. **Select a runtime:** Choose Python 3.11.\n\n\tf. Select a location for new resources. For better performance and lower costs choose the same [region](https://azure.microsoft.com/regions/) where Microsoft Sentinel is located.\n\n6. Deployment will begin. A notification is displayed after your function app is created and the deployment package is applied.\n7. Go to Azure Portal for the Function App configuration."
            },
            {
              "description": "**2. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select **+ New application setting**.\n3. Add each of the following application settings individually, with their respective string values (case-sensitive): \n\t\tRESOURCE_NAMES\n\t\tCREDENTIALS_FILE_CONTENT\n\t\tWORKSPACE_ID\n\t\tSHARED_KEY\n\t\tlogAnalyticsUri (Optional)\n - Use logAnalyticsUri to override the log analytics API endpoint for dedicated cloud. For example, for public cloud, leave the value empty; for Azure GovUS cloud environment, specify the value in the following format: `https://WORKSPACE_ID.ods.opinsights.azure.us`. \n4. Once all application settings have been entered, click **Save**."
            }
          ],
          "id": "[variables('_uiConfigId2')]",
          "additionalRequirementBanner": ">This data connector depends on a parser based on a Kusto Function to work as expected [**ApigeeX**](https://aka.ms/sentinel-ApigeeXDataConnector-parser) which is deployed with the Microsoft Sentinel Solution."
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject1').parserTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "ApigeeX Data Parser with template version 3.1.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject1').parserVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject1')._parserName1]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for ApigeeX",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "ApigeeX",
                "query": "let ApigeeX_view = view () {\nApigeeX_CL\n| extend EventVendor = 'Google'\n| extend EventProduct = 'ApigeeX'\n| project-rename\n    EventSeverity=severity_s,\n    EventEndTime=timestamp_t,\n    SrcIpAddr=payload_requestMetadata_callerIp_s,\n    HttpUserAgentOriginal=payload_requestMetadata_callerSuppliedUserAgent_s\n};\nlet GcpApigee1_view = view () {\nGoogleApigeeXV2_CL\n| extend EventSeverity=column_ifexists('Severity', '')\n| extend EventEndTime=column_ifexists('Timestamp', '')\n| extend protopayloadList=todynamic(ProtoPayload)\n| extend\n    SrcIpAddr= tostring(protopayloadList.requestMetadata.callerIp),\n    HttpUserAgentOriginal= tostring(protopayloadList.requestMetadata.callerSuppliedUserAgent)\n};\nunion isfuzzy=true (ApigeeX_view), (GcpApigee1_view)\n| project\nEventSeverity,\nEventEndTime,\nSrcIpAddr,\nHttpUserAgentOriginal\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
              "dependsOn": [
                "[variables('parserObject1')._parserId1]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ApigeeX')]",
                "contentId": "[variables('parserObject1').parserContentId1]",
                "kind": "Parser",
                "version": "[variables('parserObject1').parserVersion1]",
                "source": {
                  "name": "Google Apigee",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "contentKind": "Parser",
        "displayName": "Parser for ApigeeX",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.0.0')))]",
        "version": "[variables('parserObject1').parserVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject1')._parserName1]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for ApigeeX",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "ApigeeX",
        "query": "let ApigeeX_view = view () {\nApigeeX_CL\n| extend EventVendor = 'Google'\n| extend EventProduct = 'ApigeeX'\n| project-rename\n    EventSeverity=severity_s,\n    EventEndTime=timestamp_t,\n    SrcIpAddr=payload_requestMetadata_callerIp_s,\n    HttpUserAgentOriginal=payload_requestMetadata_callerSuppliedUserAgent_s\n};\nlet GcpApigee1_view = view () {\nGoogleApigeeXV2_CL\n| extend EventSeverity=column_ifexists('Severity', '')\n| extend EventEndTime=column_ifexists('Timestamp', '')\n| extend protopayloadList=todynamic(ProtoPayload)\n| extend\n    SrcIpAddr= tostring(protopayloadList.requestMetadata.callerIp),\n    HttpUserAgentOriginal= tostring(protopayloadList.requestMetadata.callerSuppliedUserAgent)\n};\nunion isfuzzy=true (ApigeeX_view), (GcpApigee1_view)\n| project\nEventSeverity,\nEventEndTime,\nSrcIpAddr,\nHttpUserAgentOriginal\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
      "dependsOn": [
        "[variables('parserObject1')._parserId1]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ApigeeX')]",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "kind": "Parser",
        "version": "[variables('parserObject1').parserVersion1]",
        "source": {
          "kind": "Solution",
          "name": "Google Apigee",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject2').parserTemplateSpecName2]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "ApigeeXV2 Data Parser with template version 3.1.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject2').parserVersion2]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject2')._parserName2]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for ApigeeXv2",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "ApigeeXv2",
                "query": "ApigeeXV2_CL\n| extend\n    EventVendor = 'Google',\n    EventProduct = 'ApigeeX',\n    RequestName = tostring(parse_json(tostring(protoPayload.request)).instance),\n    EnvironmentName =  tostring(split(tostring(parse_json(tostring(protoPayload.request)).instance), '/')[3]),\n    RequestAttributesTime = tostring(parse_json(tostring(parse_json(tostring(protoPayload.requestMetadata)).requestAttributes)).['time']),\n    InstertID = insertId,\n    ResourceType = tostring(resource.type),\n    Type = tostring(protoPayload.['@type']),\n    MethodName = tostring(protoPayload.methodName),\n    ProjectID =  tostring(parse_json(tostring(resource.labels)).project_id),\n    Service = tostring(parse_json(tostring(resource.labels)).service),\n    Method =  tostring(parse_json(tostring(resource.labels)).method),\n    PrincipalEmail = tostring(parse_json(tostring(protoPayload.authenticationInfo)).principalEmail),\n    PrincipalSubject = tostring(parse_json(tostring(protoPayload.authenticationInfo)).principalSubject),\n    SrcIpAddr = tostring(parse_json(tostring(protoPayload.requestMetadata)).callerIp),\n    HttpUserAgentOriginal = tostring(parse_json(tostring(protoPayload.requestMetadata)).callerSuppliedUserAgent),\n    RequestAttributes =tostring(parse_json(tostring(protoPayload.requestMetadata)).requestAttributes),\n    ServiceName = tostring(parse_json(tostring(protoPayload.serviceName))),\n    AuthorizationInfo = tostring(parse_json(tostring(protoPayload.authorizationInfo))),\n    ResourceName = tostring(parse_json(tostring(protoPayload.resourceName))),\n    InstanceUID =  tostring(parse_json(tostring(protoPayload.request)).instanceUid),\n    RequestType = tostring(parse_json(tostring(protoPayload.request)).['@type']),\n    EventEndTime = timestamp,\n    ResourceLocation = tostring(parse_json(tostring(protoPayload.resourceLocation))),\n    DestinationAttributes = tostring(parse_json(tostring(protoPayload.requestMetadata)).destinationAttributes),\n    Resources = protoPayload.resources\n| project-away protoPayload, resource\n| project-rename\n    EventSeverity = severity,\n    InsertID = insertId,\n    LogName = logName,\n    TimeStamp = timestamp\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject2')._parserId2,'/'))))]",
              "dependsOn": [
                "[variables('parserObject2')._parserId2]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ApigeeXv2')]",
                "contentId": "[variables('parserObject2').parserContentId2]",
                "kind": "Parser",
                "version": "[variables('parserObject2').parserVersion2]",
                "source": {
                  "name": "Google Apigee",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject2').parserContentId2]",
        "contentKind": "Parser",
        "displayName": "Parser for ApigeeXv2",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject2').parserContentId2,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject2').parserContentId2,'-', '1.0.0')))]",
        "version": "[variables('parserObject2').parserVersion2]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject2')._parserName2]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for ApigeeXv2",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "ApigeeXv2",
        "query": "ApigeeXV2_CL\n| extend\n    EventVendor = 'Google',\n    EventProduct = 'ApigeeX',\n    RequestName = tostring(parse_json(tostring(protoPayload.request)).instance),\n    EnvironmentName =  tostring(split(tostring(parse_json(tostring(protoPayload.request)).instance), '/')[3]),\n    RequestAttributesTime = tostring(parse_json(tostring(parse_json(tostring(protoPayload.requestMetadata)).requestAttributes)).['time']),\n    InstertID = insertId,\n    ResourceType = tostring(resource.type),\n    Type = tostring(protoPayload.['@type']),\n    MethodName = tostring(protoPayload.methodName),\n    ProjectID =  tostring(parse_json(tostring(resource.labels)).project_id),\n    Service = tostring(parse_json(tostring(resource.labels)).service),\n    Method =  tostring(parse_json(tostring(resource.labels)).method),\n    PrincipalEmail = tostring(parse_json(tostring(protoPayload.authenticationInfo)).principalEmail),\n    PrincipalSubject = tostring(parse_json(tostring(protoPayload.authenticationInfo)).principalSubject),\n    SrcIpAddr = tostring(parse_json(tostring(protoPayload.requestMetadata)).callerIp),\n    HttpUserAgentOriginal = tostring(parse_json(tostring(protoPayload.requestMetadata)).callerSuppliedUserAgent),\n    RequestAttributes =tostring(parse_json(tostring(protoPayload.requestMetadata)).requestAttributes),\n    ServiceName = tostring(parse_json(tostring(protoPayload.serviceName))),\n    AuthorizationInfo = tostring(parse_json(tostring(protoPayload.authorizationInfo))),\n    ResourceName = tostring(parse_json(tostring(protoPayload.resourceName))),\n    InstanceUID =  tostring(parse_json(tostring(protoPayload.request)).instanceUid),\n    RequestType = tostring(parse_json(tostring(protoPayload.request)).['@type']),\n    EventEndTime = timestamp,\n    ResourceLocation = tostring(parse_json(tostring(protoPayload.resourceLocation))),\n    DestinationAttributes = tostring(parse_json(tostring(protoPayload.requestMetadata)).destinationAttributes),\n    Resources = protoPayload.resources\n| project-away protoPayload, resource\n| project-rename\n    EventSeverity = severity,\n    InsertID = insertId,\n    LogName = logName,\n    TimeStamp = timestamp\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject2')._parserId2,'/'))))]",
      "dependsOn": [
        "[variables('parserObject2')._parserId2]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ApigeeXv2')]",
        "contentId": "[variables('parserObject2').parserContentId2]",
        "kind": "Parser",
        "version": "[variables('parserObject2').parserVersion2]",
        "source": {
          "kind": "Solution",
          "name": "Google Apigee",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject3').parserTemplateSpecName3]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Unified_ApigeeX Data Parser with template version 3.1.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject3').parserVersion3]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject3')._parserName3]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for both ApiGeeX connectors",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "Unified_ApigeeX",
                "query": "let t1= ApigeeX_CL\n    | extend EventVendor = 'Google',\n             EventProduct = 'ApigeeX'\n    | project-rename\n        RequestName = payload_request_name_s,\n        RequestAPIProxyType = payload_request_environment_apiProxyType_s,\n        DeploymentType = payload_request_environment_deploymentType_s,\n        Description = payload_request_environment_description_s,\n        DisplayName = payload_request_environment_displayname_s,\n        EnvironmentName = payload_request_environment_name_s,\n        ResponseType = payload_response_type_s,\n        ResponseName = payload_response_name_s,\n        ResponseDisplayName = payload_response_displayName_s,\n        ResponseAPIProxyType = payload_response_apiProxyType_s,\n        StatusCode = payload_status_code_d,\n        StatusMessage = payload_status_message_s,   \n        RequestReportTime = payload_request_reportTime_s,\n        RequestAttributesTime = payload_requestMetadata_requestAttributes_time_t,\n        InsertID = insert_id_s,    \n        ResourceType = resource_type_s,\n        EventSeverity=severity_s,\n        TimeStamp = timestamp_t,\n        Type = payload__type_s,\n        LogName = log_name_s,\n        MethodName = payload_methodName_s,\n        ProjectID = resource_labels_project_id_s,\n        Service = resource_labels_service_s,\n        Method = resource_labels_method_s,\n        PrincipalEmail = payload_authenticationInfo_principalEmail_s,\n        SrcIpAddr=payload_requestMetadata_callerIp_s,\n        HttpUserAgentOriginal=payload_requestMetadata_callerSuppliedUserAgent_s,\n        RequestAttributes = payload_requestMetadata_requestAttributes_time_s,\n        ServiceName = payload_serviceName_s,\n        AuthorizationInfo = payload_authorizationInfo_s,\n        ResourceName = payload_resourceName_s,\n        InstanceUID = payload_request_instanceUid_g,\n        RequestType = payload_request_type_s,\n        EventEndTime=timestamp_t;\nlet t2 = ApigeeXV2_CL\n    | extend\n        EventVendor = 'Google',\n        EventProduct = 'ApigeeX',        \n        RequestName = tostring(parse_json(tostring(protoPayload.request)).instance),\n        EnvironmentName =  tostring(split(tostring(parse_json(tostring(protoPayload.request)).instance), '/')[3]),\n        RequestAttributesTime = tostring(parse_json(tostring(parse_json(tostring(protoPayload.requestMetadata)).requestAttributes)).['time']),\n        InsertID = insertId,\n        ResourceType = tostring(resource.type),\n        Type = tostring(protoPayload.[\"@type\"]),\n        MethodName = tostring(protoPayload.methodName),\n        ProjectID =  tostring(parse_json(tostring(resource.labels)).project_id),\n        Service = tostring(parse_json(tostring(resource.labels)).service),\n        Method =  tostring(parse_json(tostring(resource.labels)).method),\n        PrincipalEmail = tostring(parse_json(tostring(protoPayload.authenticationInfo)).principalEmail),\n        PrincipalSubject = tostring(parse_json(tostring(protoPayload.authenticationInfo)).principalSubject),\n        SrcIpAddr = tostring(parse_json(tostring(protoPayload.requestMetadata)).callerIp),\n        HttpUserAgentOriginal = tostring(parse_json(tostring(protoPayload.requestMetadata)).callerSuppliedUserAgent), \n        RequestAttributes =tostring(parse_json(tostring(protoPayload.requestMetadata)).requestAttributes),\n        ServiceName = tostring(parse_json(tostring(protoPayload.serviceName))),\n        AuthorizationInfo = tostring(parse_json(tostring(protoPayload.authorizationInfo))),\n        ResourceName = tostring(parse_json(tostring(protoPayload.resourceName))),\n        InstanceUID =  tostring(parse_json(tostring(protoPayload.request)).instanceUid),\n        RequestType = tostring(parse_json(tostring(protoPayload.request)).[\"@type\"]),\n        EventEndTime = timestamp,\n        ResourceLocation = tostring(parse_json(tostring(protoPayload.resourceLocation))), \n        DestinationAttributes = tostring(parse_json(tostring(protoPayload.requestMetadata)).destinationAttributes),\n        Resources = protoPayload.resources\n    | project-away protoPayload, resource\n    | project-rename\n        EventSeverity = severity,\n        LogName = logName,\n        TimeStamp = timestamp;\nt1\n| union t2\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject3')._parserId3,'/'))))]",
              "dependsOn": [
                "[variables('parserObject3')._parserId3]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'Unified_ApigeeX')]",
                "contentId": "[variables('parserObject3').parserContentId3]",
                "kind": "Parser",
                "version": "[variables('parserObject3').parserVersion3]",
                "source": {
                  "name": "Google Apigee",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject3').parserContentId3]",
        "contentKind": "Parser",
        "displayName": "Parser for both ApiGeeX connectors",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject3').parserContentId3,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject3').parserContentId3,'-', '1.0.0')))]",
        "version": "[variables('parserObject3').parserVersion3]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject3')._parserName3]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for both ApiGeeX connectors",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "Unified_ApigeeX",
        "query": "let t1= ApigeeX_CL\n    | extend EventVendor = 'Google',\n             EventProduct = 'ApigeeX'\n    | project-rename\n        RequestName = payload_request_name_s,\n        RequestAPIProxyType = payload_request_environment_apiProxyType_s,\n        DeploymentType = payload_request_environment_deploymentType_s,\n        Description = payload_request_environment_description_s,\n        DisplayName = payload_request_environment_displayname_s,\n        EnvironmentName = payload_request_environment_name_s,\n        ResponseType = payload_response_type_s,\n        ResponseName = payload_response_name_s,\n        ResponseDisplayName = payload_response_displayName_s,\n        ResponseAPIProxyType = payload_response_apiProxyType_s,\n        StatusCode = payload_status_code_d,\n        StatusMessage = payload_status_message_s,   \n        RequestReportTime = payload_request_reportTime_s,\n        RequestAttributesTime = payload_requestMetadata_requestAttributes_time_t,\n        InsertID = insert_id_s,    \n        ResourceType = resource_type_s,\n        EventSeverity=severity_s,\n        TimeStamp = timestamp_t,\n        Type = payload__type_s,\n        LogName = log_name_s,\n        MethodName = payload_methodName_s,\n        ProjectID = resource_labels_project_id_s,\n        Service = resource_labels_service_s,\n        Method = resource_labels_method_s,\n        PrincipalEmail = payload_authenticationInfo_principalEmail_s,\n        SrcIpAddr=payload_requestMetadata_callerIp_s,\n        HttpUserAgentOriginal=payload_requestMetadata_callerSuppliedUserAgent_s,\n        RequestAttributes = payload_requestMetadata_requestAttributes_time_s,\n        ServiceName = payload_serviceName_s,\n        AuthorizationInfo = payload_authorizationInfo_s,\n        ResourceName = payload_resourceName_s,\n        InstanceUID = payload_request_instanceUid_g,\n        RequestType = payload_request_type_s,\n        EventEndTime=timestamp_t;\nlet t2 = ApigeeXV2_CL\n    | extend\n        EventVendor = 'Google',\n        EventProduct = 'ApigeeX',        \n        RequestName = tostring(parse_json(tostring(protoPayload.request)).instance),\n        EnvironmentName =  tostring(split(tostring(parse_json(tostring(protoPayload.request)).instance), '/')[3]),\n        RequestAttributesTime = tostring(parse_json(tostring(parse_json(tostring(protoPayload.requestMetadata)).requestAttributes)).['time']),\n        InsertID = insertId,\n        ResourceType = tostring(resource.type),\n        Type = tostring(protoPayload.[\"@type\"]),\n        MethodName = tostring(protoPayload.methodName),\n        ProjectID =  tostring(parse_json(tostring(resource.labels)).project_id),\n        Service = tostring(parse_json(tostring(resource.labels)).service),\n        Method =  tostring(parse_json(tostring(resource.labels)).method),\n        PrincipalEmail = tostring(parse_json(tostring(protoPayload.authenticationInfo)).principalEmail),\n        PrincipalSubject = tostring(parse_json(tostring(protoPayload.authenticationInfo)).principalSubject),\n        SrcIpAddr = tostring(parse_json(tostring(protoPayload.requestMetadata)).callerIp),\n        HttpUserAgentOriginal = tostring(parse_json(tostring(protoPayload.requestMetadata)).callerSuppliedUserAgent), \n        RequestAttributes =tostring(parse_json(tostring(protoPayload.requestMetadata)).requestAttributes),\n        ServiceName = tostring(parse_json(tostring(protoPayload.serviceName))),\n        AuthorizationInfo = tostring(parse_json(tostring(protoPayload.authorizationInfo))),\n        ResourceName = tostring(parse_json(tostring(protoPayload.resourceName))),\n        InstanceUID =  tostring(parse_json(tostring(protoPayload.request)).instanceUid),\n        RequestType = tostring(parse_json(tostring(protoPayload.request)).[\"@type\"]),\n        EventEndTime = timestamp,\n        ResourceLocation = tostring(parse_json(tostring(protoPayload.resourceLocation))), \n        DestinationAttributes = tostring(parse_json(tostring(protoPayload.requestMetadata)).destinationAttributes),\n        Resources = protoPayload.resources\n    | project-away protoPayload, resource\n    | project-rename\n        EventSeverity = severity,\n        LogName = logName,\n        TimeStamp = timestamp;\nt1\n| union t2\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject3')._parserId3,'/'))))]",
      "dependsOn": [
        "[variables('parserObject3')._parserId3]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'Unified_ApigeeX')]",
        "contentId": "[variables('parserObject3').parserContentId3]",
        "kind": "Parser",
        "version": "[variables('parserObject3').parserVersion3]",
        "source": {
          "kind": "Solution",
          "name": "Google Apigee",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.1.0",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "Google Apigee",
        "publisherDisplayName": "Microsoft Sentinel, Microsoft Corporation",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/Google%20Apigee/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>The <a href=\"https://cloud.google.com/apigee/docs\">Google ApigeeX</a> solution provides the capability to ingest ApigeeX audit logs into Microsoft Sentinel using the GCP Logging API or PubSub architecture. Refer to <a href=\"https://cloud.google.com/logging/docs/reference/v2/rest\">GCP Logging API documentation</a> for more information on the Azure Function connector and the <a href=\"https://learn.microsoft.com/azure/sentinel/connect-google-cloud-platform?tabs=terraform%2Cauditlogs\">Microsoft Sentinel documentation</a> for the basics on PubSub based ingestion.</p>\n<p><strong>Underlying Microsoft Technologies used:</strong></p>\n<p>This solution takes a dependency on the following technologies, and some of these dependencies either may be in <a href=\"https://azure.microsoft.com/support/legal/preview-supplemental-terms/\">Preview</a> state or might result in additional ingestion or operational costs:</p>\n<ol type=\"a\">\n<li><p><a href=\"https://docs.microsoft.com/azure/azure-monitor/logs/data-collector-api\">Azure Monitor HTTP Data Collector API</a></p>\n</li>\n<li><p><a href=\"https://azure.microsoft.com/services/functions/#overview\">Azure Functions</a></p>\n</li>\n</ol>\n<p>c.<a href=\"https://learn.microsoft.com/en-us/azure/sentinel/create-codeless-connector\">Codeless Data Connector</a></p>\n<p><strong>Data Connectors:</strong> 2, <strong>Parsers:</strong> 3</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Solutions/Google%20Apigee/logo/Google-Cloud-Branding.png\" width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "Google Apigee",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentIdConnections1')]",
              "version": "[variables('dataConnectorCCPVersion')]"
            },
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId2')]",
              "version": "[variables('dataConnectorVersion2')]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject1').parserContentId1]",
              "version": "[variables('parserObject1').parserVersion1]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject2').parserContentId2]",
              "version": "[variables('parserObject2').parserVersion2]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject3').parserContentId3]",
              "version": "[variables('parserObject3').parserVersion3]"
            }
          ]
        },
        "firstPublishDate": "2021-10-28",
        "providers": [
          "Google"
        ],
        "categories": {
          "domains": [
            "DevOps"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
