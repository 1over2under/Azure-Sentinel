{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationNative')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication Event ASIM filtering parser for Microsoft Sentinel native Authentication table",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationNative",
        "query": "let parser=\n(\n  starttime: datetime=datetime(null), \n  endtime: datetime=datetime(null), \n  username_has_any: dynamic = dynamic([]),\n  targetappname_has_any: dynamic = dynamic([]),\n  srcipaddr_has_any_prefix: dynamic = dynamic([]),\n  srchostname_has_any: dynamic = dynamic([]),\n  eventtype_in: dynamic = dynamic([]),\n  eventresultdetails_in: dynamic = dynamic([]),\n  eventresult: string = '*',\n  disabled: bool=false\n)\n{\n  ASimAuthenticationEventLogs  | where not(disabled)\n  //  -- Pre-parsing filtering:\n  | where\n      (isnull(starttime) or TimeGenerated >= starttime) \n      and (isnull(endtime) or TimeGenerated <= endtime)\n      and ((array_length(username_has_any) == 0) or ActorUsername has_any (username_has_any))\n      and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n      and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix)))\n      and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n      and ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))\n      and (array_length(eventresultdetails_in) == 0)\n      and (eventresult == \"*\" or (EventResult == eventresult))\n  | extend\n        User =  TargetUsername,\n        Src = coalesce (SrcDvcId, SrcHostname, SrcIpAddr),\n        IpAddr=SrcIpAddr,\n        LogonTarget= coalesce (TargetAppName, TargetUrl, TargetHostname),\n        Dst = coalesce (TargetHostname, TargetIpAddr, TargetAppId,TargetAppName), //TargerDvcId\n        //Rule = coalesce(NetworkRuleName, tostring(NetworkRuleNumber)),\n        EventStartTime = TimeGenerated,\n        EventEndTime = TimeGenerated,\n        EventSchema = \"Authentication\"\n    //| project-away TenantId, SourceSystem, _ResourceId, _SubscriptionId\n};\nparser\n  (\n  starttime=starttime,\n  endtime=endtime,\n  username_has_any=username_has_any,\n  targetappname_has_any=targetappname_has_any,\n  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n  srchostname_has_any=srchostname_has_any,\n  eventtype_in=eventtype_in,\n  eventresultdetails_in=eventresultdetails_in,\n  eventresult=eventresult,\n  disabled=disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr:string='*',domain_has_any:dynamic=dynamic([]),responsecodename:string='*',response_has_ipv4:string='*',response_has_any_prefix:dynamic=dynamic([]),eventtype:string='Query',disabled:bool=False"
      }
    }
  ]
}